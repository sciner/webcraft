import { makeChunkEffectID, Vector, VectorCollectorFlat } from '../../helpers.js';
import { Mesh_Effect } from '../effect.js';

import emitter, { default as Mesh_Effect_Emitter_Block_Destroy } from "./emitter/block_destroy.js";
import { default as Mesh_Effect_Emitter_Campfire } from "./emitter/campfire.js";
import { default as Mesh_Effect_Emitter_Explosion } from "./emitter/explosion.js";
import { default as Mesh_Effect_Music_Emitter_Note } from "./emitter/music_note.js";
import { default as Mesh_Effect_Torch_Emitter_Flame } from "./emitter/torch_flame.js";
import { default as Mesh_Effect_Bubble_Emitter_Column } from "./emitter/bubble_column.js";

/**
 * Creates and destroys emitters, places particles generated by emitters in a mesh
 * Создает и уничтожает эмиттеры, помещает сгенерированные эмиттерами частиц в меш
 */
export class Mesh_Effect_Manager {

    // Init effects
    constructor(mesh_manager) {

        this.mesh_manager = mesh_manager;

        this.emitters = [];
        this.block_emitters = new VectorCollectorFlat();

        // Effect types
        this.effects = new Map();
        this.effects.set('destroy_block', Mesh_Effect_Emitter_Block_Destroy);
        this.effects.set('music_note', Mesh_Effect_Music_Emitter_Note);
        this.effects.set('campfire_flame', Mesh_Effect_Emitter_Campfire);
        this.effects.set('torch_flame', Mesh_Effect_Torch_Emitter_Flame);
        this.effects.set('explosion', Mesh_Effect_Emitter_Explosion);
        this.effects.set('bubble_column', Mesh_Effect_Bubble_Emitter_Column);
        for(const [k, c] of this.effects.entries()) {
            if(c.textures) {
                for(let i in c.textures) {
                    c.textures[i][0] = (c.textures[i][0] + .5) / 8;
                    c.textures[i][1] = (c.textures[i][1] + .5) / 8;
                    c.textures[i][2] = 1 / 8;
                    c.textures[i][3] = 1 / 8;
                }
            }
        }

    }

    /**
     * 
     */
    createBlockEmitter(args) {
        for(let i = 0; i < args.pos.length; i++) {
            const em = this.effects.get(args.type);
            if(!em) {
                throw 'error_invalid_particle';
            }
            const pos = new Vector(args.pos[i]);
            const emitter = new em(pos, args);
            this.block_emitters.set(args.block_pos, emitter);
        }
    }

    /**
     * 
     * @param {Vector} block_pos 
     */
    deleteBlockEmitter(block_pos) {
        this.block_emitters.delete(block_pos);
    }

    /**
     * 
     * @param {*} aabb 
     */
    destroyAllInAABB(aabb) {
        for(let [pos, _] of this.block_emitters.entries(aabb)) {
            this.block_emitters.delete(pos);
        }
    }

    /**
     * Create particle emitter
     * @param {string} name 
     * @param {Vector} pos 
     * @param {*} params 
     * @returns 
     */
    createEmitter(name, pos, params) {
        const em = this.effects.get(name);
        if(!em) {
            throw 'error_invalid_particle';
        }
        const emitter = new em(pos.clone(), params);
        this.emitters.push(emitter);
        return emitter;
    }

    /**
     * 
     * @param {Vector} chunk_addr 
     * @param {string} material_key 
     * @returns {Mesh_Effect}
     */
    getChunkEffectMesh(chunk_addr, material_key) {
        // const material_key = particle.material_key ?? 'extend/transparent/effects';
        const PARTICLE_EFFECTS_ID = makeChunkEffectID(chunk_addr, material_key);
        let effect_mesh = this.mesh_manager.get(PARTICLE_EFFECTS_ID);
        if(!effect_mesh) {
            effect_mesh = new Mesh_Effect(this, chunk_addr, material_key);
            this.mesh_manager.add(effect_mesh, PARTICLE_EFFECTS_ID);
        }
        return effect_mesh;
    }

    tick(delta, player_pos) {

        //
        let len = 0;
        for(let i = 0; i < this.emitters.length; i++) {
            const emitter = this.emitters[i];
            if(!emitter.canDelete()) {
                const particles = emitter.emit();
                for(let particle of particles) {
                    const mesh = this.getChunkEffectMesh(emitter.chunk_addr, particle.material_key);
                    mesh.add(particle);
                }
                this.emitters[len++] = emitter;
            }
        }
        this.emitters.length = len;

        for(let emitter of this.block_emitters) {
            if(player_pos.distance(emitter.pos) < emitter.max_distance) {
                const particles = emitter.emit();
                for(let particle of particles) {
                    const mesh = this.getChunkEffectMesh(emitter.chunk_addr, particle.material_key);
                    mesh.add(particle);
                }
            }
        }

    }

}