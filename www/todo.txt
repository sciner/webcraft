# TAGS:
- agriculture:
- alpha:
- anycardinal:           Используется в world_action для определения направления лестниц/лиан (по факту таких блоков нет)
- bamboo:
- bed:
- bee_nest:
- button:
- cake:                   Это торт, который можно съесть
- can_put_info_pot:       Может быть установлено в полено
- can_set_on_wall:
- carpet:
- dirt:
- door:                   Дверь, которую можно открыть
- doubleface:
- draw_only_down:         Рисовать только нижнюю часть
- flower:
- glass:
- is_tall_planting:       Используется в стиле planting, для того, чтобы рисовать высокую траву из одного и того же блока, но беря текстуры up, down, вместо side
- item_frame:
- jukebox:                Это устройство, куда можно поместить пластинку
- ladder:
- layering:               "Наслаивание" блока друг на друга, при этом блок остается 1, но у него увеличивается высота (максимум до 1). Ещё такие блоки можно ставить только на горизонтальную поверхность
- leaves:                 Это листва
- log:                    Древесина, бревно, полено
- mask_biome:
- mask_color:
- multiply_color:
- mushroom_block:
- no_drop:
- no_drop_ao:             Этот блок не отбрасывает AO
- no_random_pos:
- no_set_on_top:          Нельзя ставить другие блоки на этот блок
- noclonable:
- ore:
- place_only_to_ceil:     Блок с таким тегом можно только подвесить на потолок
- plank:
- pot:
- random_rotate_up:       Крутить верхнюю текстуру в случайном направлении
- rotate_by_pos_n:        Можно ставить в любом направлении
- rotate_by_pos_n_12:
- rotate_by_pos_n_6:
- rotate_by_pos_n_xyz:    Можно ставить в любом направлении, но поставится только в одном из 3-х (то pos_n.xyz будут либо 0 либо положительными единицами. отрицательных не будет, это сделано напрмер для пеньков, чтобы текстуры правильно стыковались всегда в одном направлении)
- rotate_x8:              Блок можно повернуть при установке в одно из 8 положений по оси X
- rotate_x16:             Блок можно повернуть при установке в одно из 16 положений по оси X
- sapling:
- set_on_water:
- set_only_fullface:      Можно поставить только на полный (непрозрачный блок, снизу)
- sign:
- stairs:                 Это ступеньки
- trapdoor:               Это люк
- vines:

# Свойства блоков:
1) destroy_to_down
    пример значения: ["CAVE_VINE_PART1", "CAVE_VINE_PART2", "CAVE_VINE_PART3", "CAVE_VINE_PART4"]
    определяет список блоков, связанных по цепочке, используется например при уничтожении блока, проверяются блоки ниже, чтобы их тоже уничтожить

2) drop_item
    пример значения: {"name": "CAVE_VINE_BERRY", "count": 1}
    переопределяет тип блока, которое выпадет, при его уничтожении в режиме выживания

3) texture

4) stage_textures
    Это по своей сути массив свойств texture.
    Данное свойство есть у блоков, которые имеют "стадии созревания", чтобы каждую стадию отрисовывать своими текстурами

5) extra_data
    Это данные, которые будут записаны в БД в таком же виде, как они объявлены у блока.
    Эти данные доступны всегда и везде у каждого блока, у каждого блока они свои.
    В последствии эти данные можно менять при изменении блока, они также будут сохранены в БД.

    У extra_data есть особые(зарезервированные) поля:
    a) notick, блоки, у которых в extra_data есть такое поле не будут "тикать";
    b) У extra_data есть возможность запрограммировать вычислимые поля, для этого нужно в extra_data добавить массив "calculated", пример:
        "extra_data": {
            "calculated": [
                {"type": "pos", "name": "pos"},
                {"type": "random_int", "name": "max_height", "min_max": [12, 16]}
            ]
        }
        - в "calculated" содержится массив вычисляемых полей для extra_data, которые будут автоматически вычислены методом BLOCK.makeExtraData() на момент установки блока и добавлены в extra_data.
        - при этом само поле calculated не попадёт в extra_data создаваемого блока.
        - calculated это массив объектов, они должны иметь 2 обязательных поля (type и name). Где `type` это тип вычислимого поля, а `name`, это будущее имя поля, с которым вычисленное значение запишется в extra_data

6) redstone

7) inventory
    Это перепрограммирование вида иконки, котолрое будет использовано для блока при отрисовки его в инвентаре.
    Пример:
    "inventory": {
        "style": "extruder",
        "texture": [12, 28]
    }

// lm (r, b, b) + flags

    NORMAL_UP
        куда-то поворачивает какую-то нормаль

    MASK_BIOME - если указан, тогда:
        lm.r - x координата в той же текстуре указывающая на цвет тинта
        lm.g - y координата в той же текстуре указывающая на цвет тинта
        lm.b - указывает на смещение маски (смещение на 1 блок = 1/32)
        Данный флаг дружит с FLAG_ANIMATED и они делят lm.b между собой

    NO_AO
        квад как то по особому игнорирует AO
        см. NO_CAN_TAKE_AO

    NO_FOG
        квад игнорирует туман

    LOOK_AT_CAMERA
        квад всегда будет повернут в камеру

    LOOK_AT_CAMERA_HOR
        квад всегда будет повернут в сторону камеру по оси X

    FLAG_ANIMATED
        квад с анимированной текстурой, при этом
        lm.b - будет указывать на количество кадров
        Данный флаг дружит с MASK_BIOME и они делят lm.b между собой

    FLAG_TEXTURE_SCROLL
        текстура плавно скролится
        lm.g - содержит скорость скрола

    NO_CAN_TAKE_AO
        квад как то по особому игнорирует AO
        см. NO_AO

    QUAD_FLAG_OPACITY
        lm.b - умножает альфа аканал текстуры квада на значение в этом компоненте

    QUAD_FLAG_SDF
        указывает на то, что это SDF шрифт и его нужно обрабатывать по особому

    NO_CAN_TAKE_LIGHT
        квад игнорирует освещение

-----
Реализовано:
+ неограниченный во всех направлениях мир с постепенной подгрузкой
+ генератор ландшафта с биомами и пещерами
+ генератор бесконечно уходящих вниз пещер нижнего уровня
+ режим полёта включить/выключить в режиме креатива по двойному нажатию на пробел
+ пошатывание камеры в такт ходьбе
+ отрисовка руки с эффектом пошатывания при ходьбе, а также выбранного блока/инструмента
+ 3D облака
+ масштабируемый интерфейс (чтобы на разных разрешениях элементы интерфейса смотрелись в одинаковом масштабе)
+ скины игроков в т.ч. 2-я версия (2-х слойные)
+ переопределяемые ресурс-паки
+ сетевая игра (сервер на NodeJS)
+ список сетевых игроков в окне отладки (F3)
+ возможность создания собственных серверов
+ skybox небо
+ освещение
+ анимированные текстуры (вода, лава, ...)
+ поддержка рецептов описанных в JSON
+ мобы (отрисовка, анимация, серверная логика, сохранение их состояние в БД и загрузка из БД при подгрузке чанка на их координатах)
+ крафтовый стол с возможостью крафта
+ чат
+ не разрушать буферы при сдвиге мира, а сделать их перемещение (чтобы не иметь проблему с точностью вещественных чисел в шейдерах)
+ позволять скрывать тех. информацию и интерфейс по кнопкам F3, F1
+ спецэффекты "разлетания" блока при его разрушении
+ дождь
+ блоки источающие вокруг себя свет (факелы, глоустоун и прочие)
+ Ambient Occlusion
+ звуки при установке блока
+ звуки ходьбы (разные в зависимости от материала под ногами)
+ возможность подниматься вертикально по лестницам, лианам
+ растения занимающие 2 блока
+ наслаиваемые блоки (пласты снега)
+ полублоки, превращаемые в полные блоки при объединении со вторым полублоком
+ ведра с блоками (после опустошения ведра оно заменяется в инвентаре на пустое)
+ возможность связки блоков в одну цепочку, которая удаляется при разрушении любого входящего в нее блока
+ разрушение нижестоящих "связанных" блоков (двери, сталактиты в пещарах и прочее)
+ возможность лопатой сделать из блока земли блок тропинки
+ возможность выкидывать из инвентаря вещи
+ отрисовка в мире выкинутого предмета (возможность подобрать такой предмет)
+ эффект разрушения блока при ударах по нему
+ раскрашивание травы в другие оттенки в зависимости от биома
+ поломка инструмента после исчерпания его "ресурса"
+ создание игроком нового мира (выбор генератора и seed)
+ инвертируемый прицел
+ меняется отрисовка, если глаза находятся в воде (туман, + накладывается цвет воды с прозрачностью)
+ смена физики движения под водой (возможность всплытия, погружения)
+ отрисовка наложенных сверху блока суб-элементов (лестницы, )
+ сохранение инвентаря и позиции игрока на сервере + восстановление при входе в игру
+ дать возможность размещать блоки со стилем plant и sign повернутыми основанием к любой из шести сторон
+ люки (с возможностью открывать/закрывать)
+ двери (с возможностью открывать/закрывать)
+ факелы ("настольный", "настенный")
+ заборы (автоматически соединяемые с другими заборами перемычками)
+ ступеньки (возможность подъема по ним)
+ картины
+ сундуки (с возможностью удалить его, если он пустой)
+ цепи
+ обновление содержимого сундука у всех игроков в реальном времени
+ покачивание камеры при получении урона
+ подрагивание сердечек в хотбаре, когда низкий уровень здоровья
+ сердечки в хотбаре мерцают некоторое время после получения урона
+ таблички
+ пластинки
+ лисицы
+ анимация факелов
+ анимация активных музыкальных аппаратов
+ бамбук (растущий по оригинальным правилам)
+ торт (который можно съесть)
+ костёр
+ тыквы
+ горшок для цветов
+ ручные фонари
+ морской фонарь
+ smoker (Коптильня)
+ азалия
+ цветущая азалия
+ бамбук
+ ковер
+ костер с дымом

Блоки и предметы в планах:
+ рамка
+ арбуз
+ кнопка
+ маяк
+ наковальня
+ стержень края
- возможность поджога блоков
+ рельсы
- dried_kelp_block
+ grindstone (точило)
+ candle (свечи)
- строительные леса

Фичи в планах:
- доработать физику сыпучих блоков
- тени
+ запрограммировать логику печей
- саундтреки
- останки динозавров
+ данжи
+ звуки мобов
+ спавнеры
- крафты брони
- возможность надеть броню
- семена тыкв и арбузов
+ сладкие ягоды
- маленькие версии мобов
- лазурит и редстоун как руда